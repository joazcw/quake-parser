// @title Quake Log Parser API
// @version 1.0
// @description This is an API for parsing Quake 3 Arena log files and providing game statistics.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /
// @schemes http
package main

import (
	"context"
	// "flag" // Removed: Flags are no longer used
	"fmt"
	"log"
	"time"

	"quake_log_parser/database"
	// "quake_log_parser/parser" // Removed: Initial parsing is no longer part of main
	// "quake_log_parser/reporter" // Removed: Initial reporting is no longer part of main
	_ "quake_log_parser/docs" // docs is generated by Swag CLI
)

// const (
// 	mongoDBURI         = "mongodb://localhost:27017" // Defined in database package
// 	databaseName       = "quake_reports_db"
// 	gameReportsCollection = "game_reports"
// )

func main() {
	fmt.Println("Quake Log Parser API")

	// Setup MongoDB connection
	dbCtx, dbCancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer dbCancel()

	// Using default URI from database pkg. Consider making this configurable via ENV for Docker.
	mongoClient, err := database.ConnectDB(dbCtx, database.DefaultMongoDBURI) 
	if err != nil {
		log.Fatalf("Failed to connect to MongoDB: %v", err)
	}
	defer func() {
		disconnectCtx, cancelDisconnect := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancelDisconnect()
		if err := mongoClient.Disconnect(disconnectCtx); err != nil {
			log.Printf("Failed to disconnect from MongoDB: %v", err)
		}
		fmt.Println("Disconnected from MongoDB.")
	}()
	// gameCollection := mongoClient.Database(databaseName).Collection(gameReportsCollection) // Old way
	gameCollection := database.GetGameReportsCollection(mongoClient) // New way

	fmt.Println("MongoDB connected. Setting up API server...")

	// --- API Setup --- 
	fmt.Println("Starting API server on port 8080...")
	router := SetupRouter(gameCollection) // SetupRouter is defined in routers.go

	// Start the server
	if err := router.Run(":8080"); err != nil {
		log.Fatalf("Failed to run server: %v", err)
	}
} 